import time
from bot_func import *
from bot_config import *
from pprint import pprint


try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ bot_config.py
    debug = DEBUG
    token = TOKEN['Token']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    send_telegram(TELEGRAM['user_id'], ' Bot started & load config\n')
    if debug:
        d = 'Debug: {}\nToken: {}\n'
        print(d.format(debug, token))
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å operations
    token_operations_dict = OPERATIONS

    while True:
    
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        timeout = 10
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        timestamp_now, dt_object_now = get_time_now()
        if debug:
            print(' * Date Time:', dt_object_now, '| Time Stamp:', timestamp_now)
        
        # –í—ã–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞
        # token_call = Token(address=token)
        token_history = get_token_history('10')  # max 1000
        token_history_operations = token_history['operations']
        if debug:
            pprint(token_history)

        previous_operation_timestamp = token_operations_dict['operations'][0]['timestamp']
        last_operation_timestamp = token_history['operations'][0]['timestamp']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ def 10 max 1k
        operations_count = len(token_history['operations']) - 1
        first_operation_timestamp = token_history['operations'][operations_count]['timestamp']
        
        # –ï—Å–ª–∏ timestamp –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if previous_operation_timestamp != last_operation_timestamp:
            # –ó–Ω–∞—á–∏—Ç –±—ã–ª–∞ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å
            token_operations_dict.update({'operations': [
                {'timestamp': first_operation_timestamp, 'transactionHash': ''}
            ]})
            if debug:
                print('NOW:', dt_object_now, 'FOUND new timestamp:', first_operation_timestamp)
                print(token_operations_dict)

            # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ  –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞ timestamp
            # sorted(token_history_operations, key=lambda x: x['timestamp'])
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            for operations in sorted(token_history_operations, key=lambda x: x['timestamp']):
                if debug:
                    print(operations['timestamp'])

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                if operations['timestamp'] > previous_operation_timestamp:

                    if operations['from'] == TOKEN['Genesis Block']:
                        # –û—Ç—Å—ã–ª–∞–µ–º –∏–Ω—Ñ—É –≤ —Ç–µ–ª–µ–≥—É
                        tx_type = operations['type']
                        tx_value = int(operations['value'])
                        decimals = int(operations['tokenInfo']['decimals'])
                        div_dcm = int('1' + '0' * decimals)
                        h_tx_value = float(tx_value / div_dcm)
                        name = operations['tokenInfo']['name']
                        tx_from = operations['from']
                        tx_to = operations['to']
                        tx_hash = operations['transactionHash']

                        es_explore = 'https://etherscan.io/tx/' + tx_hash
                        ep_explore = 'https://ethplorer.io/tx/' + tx_hash

                        s = '‚úÖ Minted {: .8f} {} to address: {}\n\n {}'
                        message = s.format(h_tx_value, name, tx_to, es_explore)
                        send_telegram(TELEGRAM['channel_id'], message)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å
                        token_operations_dict.update({'operations': [
                            {'timestamp': last_operation_timestamp, 'transactionHash': operations['transactionHash']}
                        ]})
                        if debug:
                            print(token_operations_dict['operations'][0]['transactionHash'])

                    if operations['to'] == TOKEN['Genesis Block']:
                        # –û—Ç—Å—ã–ª–∞–µ–º –∏–Ω—Ñ—É –≤ —Ç–µ–ª–µ–≥—É
                        tx_type = operations['type']
                        tx_value = int(operations['value'])
                        decimals = int(operations['tokenInfo']['decimals'])
                        div_dcm = int('1' + '0' * decimals)
                        h_tx_value = float(tx_value / div_dcm)
                        name = operations['tokenInfo']['name']
                        tx_from = operations['from']
                        tx_to = operations['to']
                        tx_hash = operations['transactionHash']

                        es_explore = 'https://etherscan.io/tx/' + tx_hash
                        ep_explore = 'https://ethplorer.io/tx/' + tx_hash

                        s = 'üî• Burned {: .8f} {} from address: {}\n\n {}'
                        message = s.format(h_tx_value, name,  tx_from, es_explore)
                        send_telegram(TELEGRAM['channel_id'], message)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å
                        token_operations_dict.update({'operations': [
                            {'timestamp': last_operation_timestamp, 'transactionHash': operations['transactionHash']}
                        ]})
                time.sleep(timeout)
        print('NOW:', dt_object_now, 'SEARCH for timestamp:', previous_operation_timestamp)
        print('-' * 15, '\n')
        time.sleep(timeout)

except KeyboardInterrupt:
    pass

except Exception as errex:
    send_telegram(TELEGRAM['user_id'], ' Bot stopped\nGeneral exception: [' + type(errex).__name__ + ']')
    print('General exception: [' + type(errex).__name__ + ']', errex)

exit()
